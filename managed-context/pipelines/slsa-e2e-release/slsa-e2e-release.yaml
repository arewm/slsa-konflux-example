# Customized from https://github.com/konflux-ci/release-service-catalog/tree/development/pipelines/managed/push-to-external-registry
---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: slsa-e2e-release
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Tekton pipeline to release Snapshots to an external registry.

    This is a simple release pipeline to illustrate performing privileged operations after verifying a Snapshot. A majority of
    its tasks come from https://github.com/konflux-ci/release-service-catalog.git.

    IMPORTANT: You need to set the `ociStorage` parameter to an OCI repository where the managed pipeline has permissions to store
    intermediate artifacts.
  params:
    - name: release
      type: string
      description:
        The namespaced name (namespace/name) of the Release custom resource initiating this pipeline execution
    - name: releasePlan
      type: string
      description: The namespaced name (namespace/name) of the releasePlan
    - name: releasePlanAdmission
      type: string
      description: The namespaced name (namespace/name) of the releasePlanAdmission
    - name: releaseServiceConfig
      type: string
      description: The namespaced name (namespace/name) of the releaseServiceConfig
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: enterpriseContractPolicy
      type: string
      description: JSON representation of the EnterpriseContractPolicy
    - name: enterpriseContractExtraRuleData
      type: string
      description: |
        Extra rule data to be merged into the policy specified in params.enterpriseContractPolicy. Use syntax
        "key1=value1,key2=value2..."
      default: "pipeline_intention=release"
    - name: verify_ec_task_git_revision
      type: string
      description: The git revision to be used when consuming the verify-conforma task
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default: https://github.com/konflux-ci/release-service-catalog.git
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
      default: "production"
    # The release service does not allow ociStorage to be set from the RPA, so customize this value in our local fork when running the e2e demo.
    # The serviceAccount running the release pipelineRun will need to have access to push to this registry.
    - name: ociStorage
      type: string
      description: The OCI repository where the Trusted Artifacts are stored
      default: "registry-service.kind-registry/trusted-artifacts"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: "true"
    - name: dataDir
      description: The location where data will be stored
      type: string
      # to avoid tar extraction errors, we need to specify a subdirectory
      # inside the volume.
      default: "/var/workdir/release"
  tasks:
    - name: verify-access-to-resources
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/verify-access-to-resources/verify-access-to-resources.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: releasePlanAdmission
          value: $(params.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(params.releaseServiceConfig)
        - name: snapshot
          value: $(params.snapshot)
        - name: requireInternalServices
          value: "false"
        - name: orasOptions
          value: $(params.orasOptions)
    - name: collect-data
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/collect-data/collect-data.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: releasePlanAdmission
          value: $(params.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(params.releaseServiceConfig)
        - name: snapshot
          value: $(params.snapshot)
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog"
        - name: taskGitRevision
          value: "production"
        - name: orasOptions
          value: $(params.orasOptions)
      runAfter:
        - verify-access-to-resources
    - name: collect-task-params
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/collect-task-params/collect-task-params.yaml
      params:
        - name: dataDir
          value: "$(params.dataDir)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: keysToExtract
          value: |
            [
              {"resultIndex": 0, "key": ".conforma.workerCount", "default": "4"},
              {"resultIndex": 1, "key": ".conforma.timeout", "default": "8h0m0s"}
            ]
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog"
        - name: taskGitRevision
          value: "production"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.collect-data.results.sourceDataArtifact)"
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: orasOptions
          value: $(params.orasOptions)
      runAfter:
        - collect-data
    - name: check-data-keys
      params:
        - name: orasOptions
          value: $(params.orasOptions)
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: schema
          value: https://github.com/konflux-ci/release-service-catalog/raw/production/schema/dataKeys.json
        - name: systems
          value: |
            [
              {"systemName": "mapping", "dynamic": false}
            ]
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.collect-data.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog"
        - name: taskGitRevision
          value: "production"
      taskRef:
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/check-data-keys/check-data-keys.yaml
        resolver: git
      runAfter:
        - collect-data
    - name: reduce-snapshot
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/reduce-snapshot/reduce-snapshot.yaml
      params:
        - name: orasOptions
          value: $(params.orasOptions)
        - name: SNAPSHOT
          value: $(params.dataDir)/$(tasks.collect-data.results.snapshotSpec)
        - name: SINGLE_COMPONENT
          value: $(tasks.collect-data.results.singleComponentMode)
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE
          value: snapshot/$(tasks.collect-data.results.snapshotName)
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE_NS
          value: $(tasks.collect-data.results.snapshotNamespace)
        - name: SNAPSHOT_PATH
          value: $(params.dataDir)/$(tasks.collect-data.results.snapshotSpec)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.collect-data.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog"
        - name: taskGitRevision
          value: "production"
      runAfter:
        - collect-data
    - name: apply-mapping
      retries: 3
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/apply-mapping/apply-mapping.yaml
      params:
        - name: orasOptions
          value: $(params.orasOptions)
        - name: failOnEmptyResult
          value: "true"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.reduce-snapshot.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog"
        - name: taskGitRevision
          value: "production"
      runAfter:
        - reduce-snapshot
    - name: verify-conforma
      timeout: "4h00m0s"
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/enterprise-contract/ec-cli
          - name: revision
            value: "$(params.verify_ec_task_git_revision)"
          - name: pathInRepo
            value: "tasks/verify-conforma-konflux-ta/0.1/verify-conforma-konflux-ta.yaml"
      params:
        - name: orasOptions
          value: $(params.orasOptions)
        - name: SNAPSHOT_FILENAME
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: SSL_CERT_DIR
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: POLICY_CONFIGURATION
          value: $(params.enterpriseContractPolicy)
        - name: STRICT
          # only set to false for development
          value: "true"
        - name: IGNORE_REKOR
          value: "true"
        - name: EXTRA_RULE_DATA
          value: $(params.enterpriseContractExtraRuleData)
        - name: TIMEOUT
          value: "$(tasks.collect-task-params.results.extractedValues[1])"
        - name: WORKERS
          value: "$(tasks.collect-task-params.results.extractedValues[0])"
        - name: SOURCE_DATA_ARTIFACT
          value: "$(tasks.apply-mapping.results.sourceDataArtifact)"
        - name: TRUSTED_ARTIFACTS_DEBUG
          value: "$(params.trustedArtifactsDebug)"
      runAfter:
        - apply-mapping
        - collect-task-params
    - name: push-snapshot
      retries: 5
      when:
        - input: "$(tasks.apply-mapping.results.mapped)"
          operator: in
          values: ["true"]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/push-snapshot/push-snapshot.yaml
      params:
        - name: orasOptions
          value: $(params.orasOptions)
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: resultsDirPath
          value: "$(tasks.collect-data.results.resultsDir)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.apply-mapping.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog"
        - name: taskGitRevision
          value: "production"
      runAfter:
        - verify-conforma
    - name: collect-registry-token-secret
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/collect-registry-token-secret/collect-registry-token-secret.yaml
      params:
        - name: orasOptions
          value: $(params.orasOptions)
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.collect-data.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog"
        - name: taskGitRevision
          value: "production"
      runAfter:
        - collect-data
    - name: make-repo-public
      retries: 5
      when:
        - input: "$(tasks.collect-registry-token-secret.results.registrySecret)"
          operator: notin
          values: [""]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/make-repo-public/make-repo-public.yaml
      params:
        - name: orasOptions
          value: $(params.orasOptions)
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: registrySecret
          value: $(tasks.collect-registry-token-secret.results.registrySecret)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.push-snapshot.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog"
        - name: taskGitRevision
          value: "production"
      runAfter:
        - collect-registry-token-secret
        - push-snapshot
    - name: update-cr-status
      params:
        - name: orasOptions
          value: $(params.orasOptions)
        - name: resource
          value: $(params.release)
        - name: resultsDirPath
          value: $(tasks.collect-data.results.resultsDir)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: resultArtifacts
          value:
            - "$(tasks.push-snapshot.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog"
        - name: taskGitRevision
          value: "production"
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/update-cr-status/update-cr-status.yaml
      runAfter:
        - push-snapshot
