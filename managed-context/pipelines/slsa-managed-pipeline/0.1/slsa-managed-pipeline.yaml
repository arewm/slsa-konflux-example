apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: slsa-managed-pipeline
  namespace: managed-namespace
  labels:
    app.kubernetes.io/name: slsa-managed-pipeline
    app.kubernetes.io/component: managed-pipeline
    app.kubernetes.io/part-of: slsa-managed-context
spec:
  description: |
    SLSA managed context pipeline that orchestrates policy evaluation, image promotion,
    and VSA generation using trusted artifacts for communication between tasks.
    
    This pipeline demonstrates the separation of concerns approach where:
    1. Policy evaluation produces trusted artifacts with results
    2. Image promotion consumes evaluation results and promotes images
    3. VSA generation consumes both artifacts to create signed attestations
  
  params:
    - name: source-image-url
      description: "Source container image URL to evaluate and promote"
      type: string
      
    - name: target-image-url
      description: "Target container image URL for promotion"
      type: string
      
    - name: policy-bundle-ref
      description: "OCI reference to policy bundle for evaluation"
      type: string
      default: "oci://quay.io/enterprise-contract/ec-policy-data:git-55c6c07@sha256:1fc38e27"
      
    - name: tenant-artifacts-uri
      description: "OCI URI to tenant context trust artifacts"
      type: string
      
    - name: oci-storage-base-uri
      description: "Base OCI URI for storing trusted artifacts"
      type: string
      default: "oci://quay.io/konflux/trusted-artifacts"
      
    - name: verifier-id
      description: "Verifier identifier for VSA generation"
      type: string
      default: "https://managed.konflux.example.com"

  results:
    - name: pipeline-result
      description: "Overall pipeline result: SUCCESS, FAILED, or POLICY_FAILED"
      value: $(tasks.vsa-signing.results.signing-status)
      
    - name: signed-vsa-digest
      description: "SHA256 digest of the signed VSA attestation"
      value: $(tasks.vsa-signing.results.vsa-digest)
      
    - name: attestation-url
      description: "URL of the published attestation"
      value: $(tasks.vsa-signing.results.attestation-url)
      
    - name: target-image-digest
      description: "Digest of the promoted target image"
      value: $(tasks.image-promotion.results.TARGET_IMAGE_DIGEST)
      
    - name: policy-evaluation-result
      description: "Policy evaluation result from conforma VSA"
      value: $(tasks.conforma-vsa-generation.results.verification-result)

  workspaces:
    - name: shared-workspace
      description: "Shared workspace for pipeline tasks"

  tasks:
    - name: conforma-vsa-generation
      taskRef:
        name: conforma-vsa
      params:
        - name: image
          value: $(params.source-image-url)
        - name: policy-bundle-ref
          value: $(params.policy-bundle-ref)
        - name: verifier-id
          value: $(params.verifier-id)
        - name: verifier-version
          value: "v1.0.0"
        - name: vsa-output-path
          value: "/workspace/vsa-results/vsa-payload.json"
      workspaces:
        - name: build-artifacts
          workspace: shared-workspace
          subPath: build-artifacts
        - name: vsa-results
          workspace: shared-workspace
          subPath: vsa-results
        - name: signing-config
          workspace: shared-workspace
          subPath: signing-config

    - name: image-promotion
      taskRef:
        name: image-promotion
      runAfter:
        - conforma-vsa-generation
      when:
        - input: $(tasks.conforma-vsa-generation.results.verification-result)
          operator: in
          values: ["PASSED"]
      params:
        - name: SOURCE_IMAGE_URL
          value: $(params.source-image-url)
        - name: TARGET_IMAGE_URL
          value: $(params.target-image-url)
        - name: EVALUATION_RESULTS_URI
          value: "$(params.oci-storage-base-uri)/evaluation-results/$(context.pipelineRun.uid)"
        - name: PROMOTION_METADATA_URI
          value: "$(params.oci-storage-base-uri)/promotion-metadata/$(context.pipelineRun.uid)"
        - name: COPY_METHOD
          value: "skopeo"
        - name: PRESERVE_DIGESTS
          value: "true"
      workspaces:
        - name: promotion-workspace
          workspace: shared-workspace
          subPath: promotion

    - name: vsa-signing
      taskRef:
        name: vsa-sign
      runAfter:
        - image-promotion
      when:
        - input: $(tasks.image-promotion.results.PROMOTION_RESULT)
          operator: in
          values: ["SUCCESS"]
      params:
        - name: trustArtifactPath
          value: "/workspace/trust-artifacts/vsa-payload.json"
        - name: subject
          value: $(params.target-image-url)
        - name: signingKey
          value: "vsa-primary-key"
        - name: outputPath
          value: "/workspace/attestations/signed-vsa.json"
        - name: verifier-id
          value: $(params.verifier-id)
        - name: verifier-version
          value: "v1.0.0"
      workspaces:
        - name: trust-artifacts
          workspace: shared-workspace
          subPath: vsa-results
        - name: signing-config
          workspace: shared-workspace
          subPath: signing-config
        - name: attestations
          workspace: shared-workspace
          subPath: attestations

  finally:
    - name: cleanup-workspace
      taskSpec:
        steps:
          - name: cleanup
            image: registry.redhat.io/ubi9/ubi:9.3
            script: |
              #!/bin/bash
              echo "ðŸ§¹ Cleaning up pipeline workspace..."
              
              # Summary of pipeline execution
              echo ""
              echo "ðŸ“Š Pipeline Execution Summary:"
              echo "  Source Image: $(params.source-image-url)"
              echo "  Target Image: $(params.target-image-url)"
              echo "  Policy Evaluation: $(tasks.conforma-vsa-generation.results.verification-result)"
              echo "  Image Promotion: $(tasks.image-promotion.results.PROMOTION_RESULT)"
              echo "  VSA Signing: $(tasks.vsa-signing.results.signing-status)"
              echo "  VSA Digest: $(tasks.vsa-signing.results.vsa-digest)"
              echo "  Attestation URL: $(tasks.vsa-signing.results.attestation-url)"
              echo ""
              echo "âœ… SLSA managed context pipeline completed"
      workspaces:
        - name: cleanup-workspace
          workspace: shared-workspace

---
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  generateName: slsa-managed-pipeline-example-
  namespace: managed-namespace
  labels:
    app.kubernetes.io/name: slsa-managed-pipeline-run
    app.kubernetes.io/component: pipeline-run
    app.kubernetes.io/part-of: slsa-managed-context
spec:
  pipelineRef:
    name: slsa-managed-pipeline
  
  params:
    - name: source-image-url
      value: "quay.io/example/source-app:v1.0.0"
    - name: target-image-url
      value: "quay.io/example/promoted-app:v1.0.0"
    - name: policy-bundle-ref
      value: "oci://quay.io/enterprise-contract/ec-policy-data:git-55c6c07@sha256:1fc38e27"
    - name: tenant-artifacts-uri
      value: "oci://quay.io/example/tenant-artifacts:build-123"
    - name: oci-storage-base-uri
      value: "oci://quay.io/konflux/managed-artifacts"
    - name: verifier-id
      value: "https://managed.konflux.example.com"
  
  workspaces:
    - name: shared-workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi

  timeouts:
    pipeline: "1h0m0s"
    tasks: "30m0s"
    finally: "5m0s"