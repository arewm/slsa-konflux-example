---
# Secret for cosign signing keys (private key, public key, and optional password)
apiVersion: v1
kind: Secret
metadata:
  name: cosign-signing-keys
  namespace: managed-context
  labels:
    app.kubernetes.io/name: "cosign-signing-keys"
    app.kubernetes.io/component: "managed-pipeline"
    app.kubernetes.io/managed-by: "platform-team"
  annotations:
    description: "Cosign signing keys for VSA attestation"
    security.konflux.dev/trust-boundary: "managed"
    security.konflux.dev/rotation-policy: "quarterly"
type: Opaque
stringData:
  # Cosign private key (PEM format)
  # Generate with: cosign generate-key-pair
  cosign.key: |
    -----BEGIN ENCRYPTED COSIGN PRIVATE KEY-----
    # Replace with actual generated private key
    # Example generation:
    # cosign generate-key-pair --output-key-prefix managed-vsa
    # Base64 encode the private key content here
    -----END ENCRYPTED COSIGN PRIVATE KEY-----
  
  # Cosign public key (PEM format)
  cosign.pub: |
    -----BEGIN PUBLIC KEY-----
    # Replace with actual generated public key
    # This corresponds to the private key above
    -----END PUBLIC KEY-----
  
  # Password for the private key (if key is password-protected)
  # Optional - remove this field if using unprotected keys
  cosign.password: "REPLACE_WITH_SECURE_PASSWORD"

---
# Secret for verifier identity and configuration
apiVersion: v1
kind: Secret
metadata:
  name: vsa-verifier-config
  namespace: managed-context
  labels:
    app.kubernetes.io/name: "vsa-verifier-config"
    app.kubernetes.io/component: "managed-pipeline"
    app.kubernetes.io/managed-by: "platform-team"
  annotations:
    description: "VSA verifier identity and configuration"
    security.konflux.dev/trust-boundary: "managed"
type: Opaque
stringData:
  # Verifier ID - must be a valid HTTPS URL identifying the verifier
  # This should be unique to your managed environment
  verifier-id: "https://managed.konflux.example.com/verifiers/conforma-vsa"
  
  # Verifier version - semantic version of the verifier implementation
  verifier-version: "v1.0.0"
  
  # Optional: Additional verifier metadata
  verifier-description: "Konflux Managed Conforma VSA Verifier"
  verifier-contact: "platform-team@example.com"

---
# Secret for OCI registry authentication (if needed)
apiVersion: v1
kind: Secret
metadata:
  name: vsa-registry-auth
  namespace: managed-context
  labels:
    app.kubernetes.io/name: "vsa-registry-auth"
    app.kubernetes.io/component: "managed-pipeline"
    app.kubernetes.io/managed-by: "platform-team"
  annotations:
    description: "OCI registry authentication for VSA attestation storage"
    security.konflux.dev/trust-boundary: "managed"
type: kubernetes.io/dockerconfigjson
data:
  # Registry authentication configuration
  # Generate with: kubectl create secret docker-registry vsa-registry-auth \
  #   --docker-server=your-registry.com \
  #   --docker-username=your-username \
  #   --docker-password=your-password \
  #   --docker-email=your-email@example.com \
  #   --dry-run=client -o yaml
  .dockerconfigjson: |
    # Base64 encoded Docker config JSON
    # Format: {"auths":{"registry-url":{"username":"user","password":"pass","auth":"base64(user:pass)"}}}

---
# ServiceAccount for the conforma-vsa task with RBAC permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: conforma-vsa-sa
  namespace: managed-context
  labels:
    app.kubernetes.io/name: "conforma-vsa-sa"
    app.kubernetes.io/component: "managed-pipeline"
    app.kubernetes.io/managed-by: "platform-team"
  annotations:
    description: "Service account for conforma-vsa task execution"
    security.konflux.dev/trust-boundary: "managed"
secrets:
  - name: cosign-signing-keys
  - name: vsa-verifier-config
  - name: vsa-registry-auth
imagePullSecrets:
  - name: vsa-registry-auth

---
# Role defining permissions for VSA signing operations
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: managed-context
  name: conforma-vsa-role
  labels:
    app.kubernetes.io/name: "conforma-vsa-role"
    app.kubernetes.io/component: "managed-pipeline"
    app.kubernetes.io/managed-by: "platform-team"
  annotations:
    description: "Role for conforma-vsa task operations"
    security.konflux.dev/trust-boundary: "managed"
rules:
  # Allow reading configuration and secrets
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list"]
    resourceNames: ["vsa-convert-tool", "cosign-signing-keys", "vsa-verifier-config", "vsa-registry-auth"]
  
  # Allow creating and updating audit logs
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create", "update", "patch"]
    resourceNames: ["vsa-audit-logs"]
  
  # Allow reading task run information for audit trail
  - apiGroups: ["tekton.dev"]
    resources: ["taskruns"]
    verbs: ["get", "list"]
  
  # Allow reading pipeline run context
  - apiGroups: ["tekton.dev"]
    resources: ["pipelineruns"]
    verbs: ["get", "list"]

---
# RoleBinding associating the ServiceAccount with the Role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: conforma-vsa-binding
  namespace: managed-context
  labels:
    app.kubernetes.io/name: "conforma-vsa-binding"
    app.kubernetes.io/component: "managed-pipeline"
    app.kubernetes.io/managed-by: "platform-team"
  annotations:
    description: "Role binding for conforma-vsa task"
    security.konflux.dev/trust-boundary: "managed"
subjects:
  - kind: ServiceAccount
    name: conforma-vsa-sa
    namespace: managed-context
roleRef:
  kind: Role
  name: conforma-vsa-role
  apiGroup: rbac.authorization.k8s.io

---
# NetworkPolicy to restrict network access for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: conforma-vsa-netpol
  namespace: managed-context
  labels:
    app.kubernetes.io/name: "conforma-vsa-netpol"
    app.kubernetes.io/component: "managed-pipeline"
    app.kubernetes.io/managed-by: "platform-team"
  annotations:
    description: "Network policy for conforma-vsa task security"
    security.konflux.dev/trust-boundary: "managed"
spec:
  podSelector:
    matchLabels:
      tekton.dev/task: "conforma-vsa"
  policyTypes:
    - Ingress
    - Egress
  ingress: []  # No inbound traffic allowed
  egress:
    # Allow access to Rekor transparency log
    - to: []
      ports:
        - protocol: TCP
          port: 443
      namespaceSelector: {}
    # Allow access to OCI registries for attestation storage
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
      namespaceSelector: {}
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53